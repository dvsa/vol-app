server {
  listen 8080;
  listen [::]:8080;

  server_name _;

  root /var/www/html/public;

  # Prevent some browsers from MIME-sniffing the response.
  #
  # This reduces exposure to drive-by download attacks and cross-origin data
  # leaks, and should be left uncommented, especially if the server is serving
  # user-uploaded content or content that could potentially be treated as
  # executable by the browser.
  #
  # https://owasp.org/www-project-secure-headers/#x-content-type-options
  # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
  # https://blogs.msdn.microsoft.com/ie/2008/07/02/ie8-security-part-v-comprehensive-protection/
  # https://mimesniff.spec.whatwg.org/

  add_header X-Content-Type-Options nosniff always;

  # Block access to files that can expose sensitive information.
  #
  # By default, block access to backup and source files that may be left by some
  # text editors and can pose a security risk when anyone has access to them.
  #
  # https://feross.org/cmsploit/
  #
  # (!) Update the `location` regular expression from below to include any files
  #     that might end up on your production server and can expose sensitive
  #     information about your website. These files may include: configuration
  #     files, files that contain metadata about the project (e.g.: project
  #     dependencies, build scripts, etc.).

  location ~* (?:#.*#|\.(?:bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op])|~)$ {
    deny all;
  }

  location / {
   try_files $uri /index.php?$query_string;
  }

  location ~ \.php$ {
    try_files $uri =404;
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_pass unix:/run/php-fpm.socket;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_index index.php;
    include fastcgi_params;
  }
}
