<?php

namespace Dvsa\OlcsTest\Api\Domain\CommandHandler\Cases\Pi;

use Dvsa\OlcsTest\Api\Domain\CommandHandler\AbstractCommandHandlerTestCase;
use Dvsa\Olcs\Api\Domain\CommandHandler\Cases\Pi\CreateSlaException;
use Dvsa\Olcs\Api\Domain\Repository\Cases as CasesRepo;
use Dvsa\Olcs\Api\Domain\Repository\SlaException as SlaExceptionRepo;
use Dvsa\Olcs\Api\Domain\Repository\PiSlaException as PiSlaExceptionRepo;
use Dvsa\Olcs\Api\Entity\Cases\Cases as CaseEntity;
use Dvsa\Olcs\Api\Entity\Pi\SlaException as SlaExceptionEntity;
use Dvsa\Olcs\Api\Entity\Pi\PiSlaException as PiSlaExceptionEntity;
use Dvsa\Olcs\Api\Entity\Pi\Pi as PiEntity;
use Dvsa\Olcs\Transfer\Command\Cases\Pi\CreatePiSlaException as Cmd;
use Dvsa\Olcs\Api\Domain\Exception\NotFoundException;
use Mockery as m;

/**
 * Create SLA Exception Test
 *
 * @covers \Dvsa\Olcs\Api\Domain\CommandHandler\Cases\Pi\CreateSlaException
 */
class CreateSlaExceptionTest extends AbstractCommandHandlerTestCase
{
    public function setUp(): void
    {
        $this->sut = new CreateSlaException();
        $this->mockRepo('PiSlaException', PiSlaExceptionRepo::class);
        $this->mockRepo('SlaException', SlaExceptionRepo::class);
        $this->mockRepo('Cases', CasesRepo::class);

        parent::setUp();
    }

    /**
     * Test successful creation of PI SLA exception
     */
    public function testHandleCommandSuccess()
    {
        $caseId = 123;
        $slaExceptionId = 456;
        $piId = 789;

        // Mock PI entity
        $mockPi = m::mock(PiEntity::class);
        $mockPi->shouldReceive('getId')->andReturn($piId);

        // Mock Case entity
        $mockCase = m::mock(CaseEntity::class);
        $mockCase->shouldReceive('getId')->andReturn($caseId);
        $mockCase->shouldReceive('getPublicInquiry')->andReturn($mockPi);

        // Mock SLA Exception entity
        $mockSlaException = m::mock(SlaExceptionEntity::class);
        $mockSlaException->shouldReceive('getId')->andReturn($slaExceptionId);

        // Set up references
        $this->references = [
            CaseEntity::class => [
                $caseId => $mockCase
            ]
        ];

        parent::initReferences();

        // Mock repository calls
        $this->repoMap['Cases']
            ->shouldReceive('fetchById')
            ->with($caseId)
            ->andReturn($mockCase)
            ->once();

        $this->repoMap['SlaException']
            ->shouldReceive('fetchById')
            ->with($slaExceptionId)
            ->andReturn($mockSlaException)
            ->once();

        // Capture the created entity
        $capturedEntity = null;
        $this->repoMap['PiSlaException']
            ->shouldReceive('save')
            ->with(m::type(PiSlaExceptionEntity::class))
            ->andReturnUsing(function (PiSlaExceptionEntity $entity) use (&$capturedEntity) {
                $capturedEntity = $entity;
                // Note: setId is not available as IDs are auto-generated by database
                return $entity;
            })
            ->once();

        // Create command
        $command = Cmd::create([
            'case' => $caseId,
            'slaException' => $slaExceptionId
        ]);

        // Execute
        $result = $this->sut->handleCommand($command);

        // Assertions
        $this->assertInstanceOf(\Dvsa\Olcs\Api\Domain\Command\Result::class, $result);
        $this->assertContains('Case PI SLA exception added successfully', $result->getMessages());
        
        // Verify IDs are added to result
        $this->assertEquals($caseId, $result->getId('case'));
        $this->assertEquals($slaExceptionId, $result->getId('slaException'));
        // Note: caseSlaException ID will be null since setId is not available in tests
        $this->assertArrayHasKey('caseSlaException', $result->getIds());

        // Verify the entity was created correctly
        $this->assertNotNull($capturedEntity);
        $this->assertInstanceOf(PiSlaExceptionEntity::class, $capturedEntity);
    }

    /**
     * Test case not found exception
     */
    public function testHandleCommandCaseNotFound()
    {
        $caseId = 123;
        $slaExceptionId = 456;

        // Mock repository to return null for case
        $this->repoMap['Cases']
            ->shouldReceive('fetchById')
            ->with($caseId)
            ->andReturn(null)
            ->once();

        // Create command
        $command = Cmd::create([
            'case' => $caseId,
            'slaException' => $slaExceptionId
        ]);

        // Expect exception
        $this->expectException(NotFoundException::class);
        $this->expectExceptionMessage('Case not found: ' . $caseId);

        // Execute
        $this->sut->handleCommand($command);
    }

    /**
     * Test case without public inquiry exception
     */
    public function testHandleCommandCaseWithoutPublicInquiry()
    {
        $caseId = 123;
        $slaExceptionId = 456;

        // Mock Case entity without public inquiry
        $mockCase = m::mock(CaseEntity::class);
        $mockCase->shouldReceive('getId')->andReturn($caseId);
        $mockCase->shouldReceive('getPublicInquiry')->andReturn(null); // No PI

        // Set up references
        $this->references = [
            CaseEntity::class => [
                $caseId => $mockCase
            ]
        ];

        parent::initReferences();

        // Mock repository calls
        $this->repoMap['Cases']
            ->shouldReceive('fetchById')
            ->with($caseId)
            ->andReturn($mockCase)
            ->once();

        // Create command
        $command = Cmd::create([
            'case' => $caseId,
            'slaException' => $slaExceptionId
        ]);

        // Expect exception
        $this->expectException(NotFoundException::class);
        $this->expectExceptionMessage('Case does not have a public inquiry: ' . $caseId);

        // Execute
        $this->sut->handleCommand($command);
    }

    /**
     * Test SLA exception not found exception
     */
    public function testHandleCommandSlaExceptionNotFound()
    {
        $caseId = 123;
        $slaExceptionId = 456;
        $piId = 789;

        // Mock PI entity
        $mockPi = m::mock(PiEntity::class);
        $mockPi->shouldReceive('getId')->andReturn($piId);

        // Mock Case entity
        $mockCase = m::mock(CaseEntity::class);
        $mockCase->shouldReceive('getId')->andReturn($caseId);
        $mockCase->shouldReceive('getPublicInquiry')->andReturn($mockPi);

        // Set up references
        $this->references = [
            CaseEntity::class => [
                $caseId => $mockCase
            ]
        ];

        parent::initReferences();

        // Mock repository calls
        $this->repoMap['Cases']
            ->shouldReceive('fetchById')
            ->with($caseId)
            ->andReturn($mockCase)
            ->once();

        $this->repoMap['SlaException']
            ->shouldReceive('fetchById')
            ->with($slaExceptionId)
            ->andReturn(null)
            ->once();

        // Create command
        $command = Cmd::create([
            'case' => $caseId,
            'slaException' => $slaExceptionId
        ]);

        // Expect exception
        $this->expectException(NotFoundException::class);
        $this->expectExceptionMessage('SLA Exception not found');

        // Execute
        $this->sut->handleCommand($command);
    }

    /**
     * Test that handler implements TransactionedInterface
     */
    public function testImplementsTransactionedInterface()
    {
        $this->assertInstanceOf(\Dvsa\Olcs\Api\Domain\CommandHandler\TransactionedInterface::class, $this->sut);
    }


    /**
     * Test multiple SLA exceptions can be added to same case
     */
    public function testMultipleSlaExceptionsForSameCase()
    {
        $caseId = 123;
        $slaExceptionId1 = 456;
        $slaExceptionId2 = 457;
        $piId = 789;

        // Mock PI entity
        $mockPi = m::mock(PiEntity::class);
        $mockPi->shouldReceive('getId')->andReturn($piId);

        // Mock Case entity
        $mockCase = m::mock(CaseEntity::class);
        $mockCase->shouldReceive('getId')->andReturn($caseId);
        $mockCase->shouldReceive('getPublicInquiry')->andReturn($mockPi);

        // Mock SLA Exception entities
        $mockSlaException1 = m::mock(SlaExceptionEntity::class);
        $mockSlaException1->shouldReceive('getId')->andReturn($slaExceptionId1);

        $mockSlaException2 = m::mock(SlaExceptionEntity::class);
        $mockSlaException2->shouldReceive('getId')->andReturn($slaExceptionId2);

        // Set up references
        $this->references = [
            CaseEntity::class => [
                $caseId => $mockCase
            ]
        ];

        parent::initReferences();

        // Test first SLA exception
        $this->repoMap['Cases']
            ->shouldReceive('fetchById')
            ->with($caseId)
            ->andReturn($mockCase)
            ->twice();

        $this->repoMap['SlaException']
            ->shouldReceive('fetchById')
            ->with($slaExceptionId1)
            ->andReturn($mockSlaException1)
            ->once();

        $this->repoMap['SlaException']
            ->shouldReceive('fetchById')
            ->with($slaExceptionId2)
            ->andReturn($mockSlaException2)
            ->once();

        $this->repoMap['PiSlaException']
            ->shouldReceive('save')
            ->with(m::type(PiSlaExceptionEntity::class))
            ->andReturnUsing(function (PiSlaExceptionEntity $entity) {
                // Note: setId is not available as IDs are auto-generated by database
                return $entity;
            })
            ->twice();

        // Execute first command
        $command1 = Cmd::create([
            'case' => $caseId,
            'slaException' => $slaExceptionId1
        ]);

        $result1 = $this->sut->handleCommand($command1);
        $this->assertInstanceOf(\Dvsa\Olcs\Api\Domain\Command\Result::class, $result1);

        // Execute second command
        $command2 = Cmd::create([
            'case' => $caseId,
            'slaException' => $slaExceptionId2
        ]);

        $result2 = $this->sut->handleCommand($command2);
        $this->assertInstanceOf(\Dvsa\Olcs\Api\Domain\Command\Result::class, $result2);
    }
}
