name: Run Database Migrations

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      ref:
        type: string
        required: false
      dry-run:
        type: boolean
        required: false
        default: true
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run migrations against"
        type: choice
        options: [dev, int, prep]
        required: true
      ref:
        description: "Branch to run migrations from"
        type: string
        required: false
      dry-run:
        description: "Run migrations without applying changes"
        type: boolean
        required: true
        default: true

permissions:
  id-token: write
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: ${{ !inputs.dry-run && inputs.environment || null }}
    env:
      AWS_REGION: ${{ vars.DVSA_AWS_REGION }}
      AWS_OIDC_ROLE: ${{ vars[format('ENV_{0}_TF_OIDC_ROLE', inputs.environment)] || vars[(inputs.environment == 'prep' || inputs.environment == 'prod') && 'ACCOUNT_PROD_TF_OIDC_ROLE' || 'ACCOUNT_NONPROD_TF_OIDC_ROLE'] }}
      BATCH_QUEUE: ${{ vars[format('ACCOUNT_{0}_BATCH_JOB_QUEUE', (inputs.environment == 'prep' || inputs.environment == 'prod') && 'PROD' || 'NONPROD')] }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || null }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Submit Batch Job
        id: submit-job
        run: |
          JOB_ID=$(aws batch submit-job \
            --job-name "db-migration-${{ inputs.environment }}-${{ github.run_id }}" \
            --job-queue "${{ env.BATCH_QUEUE }}" \
            --job-definition "db-migration-${{ inputs.environment }}" \
            --parameters environment="${{ inputs.environment }}" \
            --query 'jobId' --output text)

          echo "job-id=${JOB_ID}" >> $GITHUB_OUTPUT

      - name: Wait for job completion
        run: |
          aws batch wait job-complete --jobs ${{ steps.submit-job.outputs.job-id }}
          STATUS=$(aws batch describe-jobs --jobs ${{ steps.submit-job.outputs.job-id }} --query 'jobs[0].status' --output text)
          if [ "$STATUS" != "SUCCEEDED" ]; then
            echo "Job failed with status: ${STATUS}"
            exit 1
          fi
