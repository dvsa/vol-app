name: Run Liquibase Migrations
permissions:
  id-token: write
  contents: read
on:
  workflow_dispatch:
    inputs:
      account:
        description: "Target AWS account"
        required: true
        type: choice
        options:
          - nonprod
          - prod
      environment:
        description: "Environment to target"
        type: choice
        options:
          - dev
          - int
          - prep
          - prod
        required: true
      dry_run:
        description: "Run in dry-run mode (show pending changes only)"
        required: true
        type: boolean
        default: true
      ref:
        description: "Git ref to checkout for vol-app (for liquibase dockerfile/entrypoint)"
        required: false
        type: string
        default: "main"
      etl_ref:
        description: "Git ref to checkout for ETL repo (to bundle in as liquibase changelog)"
        required: false
        type: string
        default: "main"
      submit_job:
        description: "Submit AWS Batch job after building"
        required: true
        type: boolean
        default: false
  workflow_call:
    inputs:
      push:
        type: boolean
        required: true
      account:
        type: string
        required: true
      environment:
        type: string
        required: true
      ref:
        type: string
        required: false
        default: "main"
        description: "Git ref to checkout for vol-app (for liquibase dockerfile/entrypoint)"
      etl_ref:
        description: "Git ref to checkout for ETL repo (to bundle in as liquibase changelog)"
        type: string
        required: false
        default: "main"
      dry_run:
        type: boolean
        required: false
        default: false
      submit_job:
        type: boolean
        required: false
        default: false
    secrets:
      VOL_GITHUB_APP_PRIVATE_KEY:
        required: true
env:
  REGISTRY: 054614622558.dkr.ecr.eu-west-1.amazonaws.com
  AWS_REGION: ${{ vars.DVSA_AWS_REGION }}
  AWS_OIDC_ROLE: ${{ inputs.account == 'prod' && vars.ACCOUNT_PROD_TF_OIDC_ROLE || vars.ACCOUNT_NONPROD_TF_OIDC_ROLE }}
  BATCH_QUEUE: ${{
    inputs.environment == 'dev'  && 'LQBASE_QUEUE_DEV'  ||
    inputs.environment == 'int'  && 'LQBASE_QUEUE_INT'  ||
    inputs.environment == 'prep' && 'LQBASE_QUEUE_PREP' ||
    inputs.environment == 'prod' && 'LQBASE_QUEUE_PROD'
    }}
jobs:
  build:
    environment: ${{ inputs.environment }}
    outputs:
      image_tag: ${{ steps.build-details.outputs.image_tag }}
      etl_sha: ${{ steps.etl-sha.outputs.sha }}
      etl_ref: ${{ inputs.etl_ref }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.VOL_GITHUB_APP_ID }}
          private-key: ${{ secrets.VOL_GITHUB_APP_PRIVATE_KEY }}
          owner: dvsa
          repositories: olcs-etl

      - name: Checkout ETL repository
        uses: actions/checkout@v4
        with:
          repository: dvsa/olcs-etl
          path: infra/docker/liquibase/changelog
          ref: ${{ inputs.etl_ref }}
          token: ${{ steps.generate-token.outputs.token }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}

      - name: Get ETL SHA
        id: etl-sha
        working-directory: infra/docker/liquibase/changelog
        run: |
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "image_tag=${REGISTRY}/vol-app/liquibase:$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Check if image exists
        id: check-image
        run: |
          if aws ecr describe-images --repository-name vol-app/liquibase --image-ids imageTag=${{ steps.etl-sha.outputs.sha }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check-image.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        if: steps.check-image.outputs.exists != 'true' && (inputs.push || github.event_name == 'workflow_dispatch')
        uses: docker/build-push-action@v6
        with:
          context: ./infra/docker/liquibase
          push: true
          tags: |
            ${{ steps.etl-sha.outputs.image_tag }}
            ${{ env.REGISTRY }}/vol-app/liquibase:latest

          cache-from: type=gha,scope=liquibase
          cache-to: type=gha,mode=max,scope=liquibase

      - name: Set build details
        id: build-details
        run: echo "image_tag=${{ steps.etl-sha.outputs.image_tag }}" >> $GITHUB_OUTPUT

  submit-batch-job:
    outputs:
      job_id: ${{ steps.submit-job.outputs.job_id }}
      job_status: ${{ steps.check-status.outputs.status }}
    needs: build
    if: |
      (inputs.push || inputs.submit_job || (github.event_name == 'workflow_dispatch' && inputs.submit_job == 'true'))
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Submit AWS Batch job
        id: submit-job
        run: |
          JOB_ID=$(aws batch submit-job \
          --job-name "liquibase-migration-${{ github.run_id }}-${{ github.run_attempt }}" \
          --job-queue "${{ vars[env.BATCH_QUEUE] }}" \
          --job-definition "${{ vars[env.BATCH_QUEUE] }}" \
          --container-overrides "{
           \"environment\": [
             {\"name\": \"DRY_RUN\", \"value\": \"${{ inputs.dry_run }}\"}
           ]
          }" \
          --scheduling-priority-override 1 \
          --share-identifier "volapp" \
          --query 'jobId' \
          --output text)
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Wait for job completion
        id: check-status
        timeout-minutes: 30
        run: |
          while true; do
            STATUS=$(aws batch describe-jobs --jobs ${{ steps.submit-job.outputs.job_id }} --query 'jobs[0].status' --output text)
            if [[ "$STATUS" == "SUCCEEDED" || "$STATUS" == "FAILED" ]]; then
              echo "status=$STATUS" >> $GITHUB_OUTPUT
              if [[ "$STATUS" == "FAILED" ]]; then
                exit 1
              fi
              break
            fi
            echo "Job status: $STATUS"
            sleep 30
          done
