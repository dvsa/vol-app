name: Docker

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: false
      project:
        type: string
        required: true
      version:
        type: string
        required: true
      app-artefact-name:
        type: string
        required: true
      push:
        type: boolean
        required: true
        default: false
      is-release:
        type: boolean
        required: false
        default: false

env:
  WORKING_DIR: infra/docker/${{ inputs.project }}
  REGISTRY: 054614622558.dkr.ecr.eu-west-1.amazonaws.com
  REGISTRY_MIRROR: ghcr.io
  AWS_OIDC_ROLE: ${{ vars.ACCOUNT_NONPROD_TF_OIDC_ROLE }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || null }}
          sparse-checkout: ${{ env.WORKING_DIR }}
          fetch-depth: ${{ !inputs.ref && 1 || 0 }}

      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.WORKING_DIR }}/Dockerfile

  build:
    name: Build ${{ inputs.push && 'and push' || '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || null }}
          sparse-checkout: ${{ env.WORKING_DIR }}
          fetch-depth: ${{ !inputs.ref && 1 || 0 }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.app-artefact-name }}
          path: infra/docker/${{ inputs.project }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/vol-app/${{ inputs.project }}
            ${{ env.REGISTRY_MIRROR }}/dvsa/vol-app/${{ inputs.project }}
          tags: |
            type=sha,prefix=
            type=semver,enable=${{ inputs.is-release }},pattern={{version}},value=${{ inputs.version }}
            type=raw,enable=${{ !inputs.is-release }},value=${{ inputs.version }}
            type=raw,value=latest

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.WORKING_DIR }}
          target: production
          platforms: linux/arm64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ inputs.project }}
          cache-to: type=gha,mode=max,scope=${{ inputs.project }}

      - name: Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build.outputs.imageid }}
          skip-dirs: /var/clamav
          version: "v0.54.1"
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1

      - name: Configure AWS credentials
        if: ${{ inputs.push }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        if: ${{ inputs.push }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}

      - name: Login to GHCR
        if: ${{ inputs.push }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_MIRROR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Untag existing latest image in ECR
        if: ${{ inputs.push }}
        run: |
          aws ecr batch-delete-image --repository-name vol-app/${{ inputs.project }} --image-ids imageTag=latest

      - name: Push Docker image
        if: ${{ inputs.push }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.WORKING_DIR }}
          target: production
          platforms: linux/arm64
          push: true
          load: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ inputs.project }}
          cache-to: type=gha,mode=max,scope=${{ inputs.project }}

      - name: Setup Notation CLI
        if: ${{ inputs.push }}
        uses: notaryproject/notation-action/setup@v1
        with:
          version: "1.1.0"

      - name: Sign artefact
        if: ${{ inputs.push }}
        uses: notaryproject/notation-action/sign@v1
        with:
          plugin_name: com.amazonaws.signer.notation.plugin
          plugin_url: https://d2hvyiie56hcat.cloudfront.net/linux/amd64/plugin/latest/notation-aws-signer-plugin.zip
          plugin_checksum: cccfe8fdcdf853d83fd57ffc80524eddda75ad7ae9d9a257b087007230ec02f9
          key_id: arn:aws:signer:eu-west-1:054614622558:/signing-profiles/vol_app_20240313124948142600000001
          target_artifact_reference: ${{ env.REGISTRY }}/vol-app/${{ inputs.project }}:${{ inputs.version }}
